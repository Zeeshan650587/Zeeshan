-- SQL File: select_queries.sql

-- Definition:
-- The SELECT statement is used to retrieve data from one or more tables in a database.
-- It allows filtering, sorting, and aggregating data as needed to extract meaningful insights.

-- Table structure for employees
CREATE TABLE employees (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    department_id INT,
    salary DECIMAL(10,2),
    FOREIGN KEY (department_id) REFERENCES departments(department_id)
);

-- Table structure for departments
CREATE TABLE departments (
    department_id SERIAL PRIMARY KEY,
    department_name VARCHAR(100) UNIQUE
);

-- Table structure for clients
CREATE TABLE clients (
    client_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50)
);

-- Inserting sample data into departments table
INSERT INTO departments (department_name) VALUES ('IT');
INSERT INTO departments (department_name) VALUES ('HR');
INSERT INTO departments (department_name) VALUES ('Finance');
INSERT INTO departments (department_name) VALUES ('Marketing');

-- Inserting sample data into employees table
INSERT INTO employees (first_name, last_name, department_id, salary) VALUES ('John', 'Doe', 1, 75000.00);
INSERT INTO employees (first_name, last_name, department_id, salary) VALUES ('Jane', 'Smith', 2, 60000.00);
INSERT INTO employees (first_name, last_name, department_id, salary) VALUES ('Alice', 'Johnson', 3, 55000.00);
INSERT INTO employees (first_name, last_name, department_id, salary) VALUES ('Bob', 'Brown', 1, 80000.00);
INSERT INTO employees (first_name, last_name, department_id, salary) VALUES ('Charlie', 'Davis', 4, 45000.00);

-- Inserting sample data into clients table
INSERT INTO clients (first_name, last_name) VALUES ('Michael', 'Clark');
INSERT INTO clients (first_name, last_name) VALUES ('Emma', 'Williams');
INSERT INTO clients (first_name, last_name) VALUES ('Olivia', 'Taylor');
INSERT INTO clients (first_name, last_name) VALUES ('Liam', 'Anderson');

-- Selecting all columns from a table (use cautiously in large tables as it retrieves all data)
SELECT * FROM employees;

-- Selecting specific columns from a table to improve performance and readability
SELECT first_name, last_name, department_id FROM employees;

-- Filtering records using WHERE clause to retrieve only relevant data
SELECT * FROM employees WHERE department_id = 1; -- Retrieves employees working in IT department

-- Sorting results in ascending order using ORDER BY (default sorting is ASC)
SELECT first_name, last_name FROM employees ORDER BY last_name ASC; -- Sorts employees by last name from A-Z

-- Sorting results in descending order using ORDER BY
SELECT first_name, last_name FROM employees ORDER BY last_name DESC; -- Sorts employees by last name from Z-A

-- Using DISTINCT to return only unique values in a specific column
SELECT DISTINCT department_id FROM employees; -- Retrieves a list of unique department IDs

-- Counting the total number of rows in a table using COUNT()
SELECT COUNT(*) FROM employees; -- Returns total number of employees

-- Using GROUP BY to aggregate data and count employees per department
SELECT department_id, COUNT(*) FROM employees GROUP BY department_id; -- Counts employees in each department

-- Filtering grouped results using HAVING (similar to WHERE but used after aggregation)
SELECT department_id, COUNT(*) FROM employees GROUP BY department_id HAVING COUNT(*) > 1; -- Retrieves departments with more than 1 employee

-- Limiting the number of records returned using LIMIT (useful for pagination)
SELECT * FROM employees LIMIT 10; -- Retrieves only the first 10 employees

-- Using OFFSET to skip rows before retrieving results (useful for pagination)
SELECT * FROM employees LIMIT 10 OFFSET 5; -- Skips first 5 records and retrieves the next 10

-- Using INNER JOIN to combine data from multiple tables (returns only matching records)
SELECT employees.first_name, employees.last_name, departments.department_name 
FROM employees
INNER JOIN departments ON employees.department_id = departments.department_id; -- Retrieves employees with their department names

-- Using LEFT JOIN to include all records from the left table and matching records from the right table
SELECT employees.first_name, employees.last_name, departments.department_name 
FROM employees
LEFT JOIN departments ON employees.department_id = departments.department_id; -- Includes employees without a department

-- Using RIGHT JOIN to include all records from the right table and matching records from the left table
SELECT employees.first_name, employees.last_name, departments.department_name 
FROM employees
RIGHT JOIN departments ON employees.department_id = departments.department_id; -- Includes departments with no employees

-- Using FULL JOIN to include all records from both tables (returns NULLs for unmatched rows)
SELECT employees.first_name, employees.last_name, departments.department_name 
FROM employees
FULL JOIN departments ON employees.department_id = departments.department_id; -- Includes all employees and all departments

-- Using UNION to combine results from two queries while removing duplicates
SELECT first_name FROM employees
UNION
SELECT first_name FROM clients; -- Combines employee and client first names without duplicates

-- Using UNION ALL to combine results and include duplicates
SELECT first_name FROM employees
UNION ALL
SELECT first_name FROM clients; -- Combines employee and client first names including duplicates

-- Using a subquery to filter results based on another queryâ€™s output
SELECT first_name, last_name FROM employees
WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'HR'); -- Retrieves employees working in the HR department

-- Using a subquery to retrieve records based on aggregated data
SELECT first_name, last_name FROM employees
WHERE salary > (SELECT AVG(salary) FROM employees); -- Retrieves employees earning above the average salary

-- Using CASE for conditional selection (similar to IF-ELSE logic)
SELECT first_name, last_name, 
CASE 
    WHEN salary > 70000 THEN 'High Salary' -- Categorizes salaries above 70000 as 'High Salary'
    WHEN salary BETWEEN 40000 AND 70000 THEN 'Medium Salary' -- Categorizes salaries between 40000 and 70000 as 'Medium Salary'
    ELSE 'Low Salary' -- Categorizes salaries below 40000 as 'Low Salary'
END AS salary_category
FROM employees; -- Assigns a salary category label to each employee